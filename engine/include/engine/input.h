#pragma once

#include <engine/input_device.h>

typedef enum {
    MOUSE_BTN_LEFT   = 0,
    MOUSE_BTN_MIDDLE = 1,
    MOUSE_BTN_RIGHT  = 2,

    MOUSE_BTN_COUNT,
} MouseButton;

typedef enum {
    KEYMOD_NONE  = 0,
    KEYMOD_ALT   = 1 << 1,
    KEYMOD_CTRL  = 1 << 2,
    KEYMOD_SHIFT = 1 << 3,
} KeyMod;

typedef enum {
    KEYBOARD_SPACE = 0,
    KEYBOARD_QUOTE,  /* ' */
    KEYBOARD_COMMA,  /* , */
    KEYBOARD_MINUS,  /* - */
    KEYBOARD_PERIOD, /* . */
    KEYBOARD_SLASH,  /* / */

    KEYBOARD_D0, /* 0 */
    KEYBOARD_D1, /* 1 */
    KEYBOARD_D2, /* 2 */
    KEYBOARD_D3, /* 3 */
    KEYBOARD_D4, /* 4 */
    KEYBOARD_D5, /* 5 */
    KEYBOARD_D6, /* 6 */
    KEYBOARD_D7, /* 7 */
    KEYBOARD_D8, /* 8 */
    KEYBOARD_D9, /* 9 */

    KEYBOARD_SEMICOLON, /* ; */
    KEYBOARD_EQUAL,     /* = */

    KEYBOARD_A,
    KEYBOARD_B,
    KEYBOARD_C,
    KEYBOARD_D,
    KEYBOARD_E,
    KEYBOARD_F,
    KEYBOARD_G,
    KEYBOARD_H,
    KEYBOARD_I,
    KEYBOARD_J,
    KEYBOARD_K,
    KEYBOARD_L,
    KEYBOARD_M,
    KEYBOARD_N,
    KEYBOARD_O,
    KEYBOARD_P,
    KEYBOARD_Q,
    KEYBOARD_R,
    KEYBOARD_S,
    KEYBOARD_T,
    KEYBOARD_U,
    KEYBOARD_V,
    KEYBOARD_W,
    KEYBOARD_X,
    KEYBOARD_Y,
    KEYBOARD_Z,

    KEYBOARD_LEFT_BRACKET,  /* [ */
    KEYBOARD_BACK_SLASH,    /* \ */
    KEYBOARD_RIGHT_BRACKET, /* ] */
    KEYBOARD_BACK_QUOTE,    /* ` */

    KEYBOARD_WORLD1, /* NON-US #1 */
    KEYBOARD_WORLD2, /* NON-US #2 */

    /* FUNCTION KEYS */
    KEYBOARD_ESCAPE,
    KEYBOARD_ENTER,
    KEYBOARD_TAB,
    KEYBOARD_BACKSPACE,
    KEYBOARD_INSERT,
    KEYBOARD_DELETE,
    KEYBOARD_RIGHT_ARROW,
    KEYBOARD_LEFT_ARROW,
    KEYBOARD_DOWN_ARROW,
    KEYBOARD_UP_ARROW,
    KEYBOARD_PAGE_UP,
    KEYBOARD_PAGE_DOWN,
    KEYBOARD_HOME,
    KEYBOARD_END,
    KEYBOARD_CAPS_LOCK,
    KEYBOARD_SCROLL_LOCK,
    KEYBOARD_NUM_LOCK,
    KEYBOARD_PRINT_SCREEN,
    KEYBOARD_PAUSE,
    KEYBOARD_F1,
    KEYBOARD_F2,
    KEYBOARD_F3,
    KEYBOARD_F4,
    KEYBOARD_F5,
    KEYBOARD_F6,
    KEYBOARD_F7,
    KEYBOARD_F8,
    KEYBOARD_F9,
    KEYBOARD_F10,
    KEYBOARD_F11,
    KEYBOARD_F12,
    KEYBOARD_F13,
    KEYBOARD_F14,
    KEYBOARD_F15,
    KEYBOARD_F16,
    KEYBOARD_F17,
    KEYBOARD_F18,
    KEYBOARD_F19,
    KEYBOARD_F20,
    KEYBOARD_F21,
    KEYBOARD_F22,
    KEYBOARD_F23,
    KEYBOARD_F24,
    KEYBOARD_F25,

    /* KEYPAD */
    KEYBOARD_KEYPAD0,
    KEYBOARD_KEYPAD1,
    KEYBOARD_KEYPAD2,
    KEYBOARD_KEYPAD3,
    KEYBOARD_KEYPAD4,
    KEYBOARD_KEYPAD5,
    KEYBOARD_KEYPAD6,
    KEYBOARD_KEYPAD7,
    KEYBOARD_KEYPAD8,
    KEYBOARD_KEYPAD9,
    KEYBOARD_KEYPAD_DECIMAL,
    KEYBOARD_KEYPAD_DIVIDE,
    KEYBOARD_KEYPAD_MULTIPLY,
    KEYBOARD_KEYPAD_SUBTRACT,
    KEYBOARD_KEYPAD_ADD,
    KEYBOARD_KEYPAD_ENTER,
    KEYBOARD_KEYPAD_EQUAL,

    KEYBOARD_LEFT_SHIFT,
    KEYBOARD_LEFT_CTRL,
    KEYBOARD_LEFT_ALT,
    KEYBOARD_LEFT_SUPER,
    KEYBOARD_RIGHT_SHIFT,
    KEYBOARD_RIGHT_CTRL,
    KEYBOARD_RIGHT_ALT,
    KEYBOARD_RIGHT_SUPER,
    KEYBOARD_MENU,

    KEYBOARD_COUNT,
    KEYBOARD_UNKNOWN = 0XFF,

} Keyboard;

typedef struct {
    InputDevice *mouse;
    InputDevice *keyboard;
} Input;

Input *inputs_create(void);

void inputs_destroy(Input *input);

void inputs_tick(Input *input);
